name: work1

on:
  workflow_dispatch:
  push:
#comment8
jobs:
  gethash:
    runs-on: ubuntu-latest
    outputs:
      headhash1: ${{ steps.headhash1.outputs.headhash }}
      headhash2: ${{ steps.headhash2.outputs.headhash }}
    steps:
      - name: Checkout1
        uses: actions/checkout@v3
        with:
          path: try1

      - name: Head Hash1
        id: headhash1
        run: |
          pwd
          echo $GITHUB_WORKSPACE
          cd try1
          git ls-remote -q | grep refs/heads/main$ | awk '{print $1}' | xargs git rev-parse --short
          git log --max-count=1
          git rev-parse --short HEAD
          sha=$(git rev-parse HEAD)
          echo "headhash=$sha" >> "$GITHUB_OUTPUT"

      - name: Sleep
        run: |
          echo sleeping...
          sleep 30
      
      - name: Checkout2
        uses: actions/checkout@v3
        with:
          ref: main
          path: try2
  
      - name: Head Hash2
        id: headhash2
        run: |
          pwd
          echo $GITHUB_WORKSPACE
          echo $GITHUB_REF
          echo $GITHUB_REPOSITORY
          echo ${GITHUB_REF#refs/*/}
          echo ${GITHUB_REPOSITORY#*/}
          echo $GITHUB_SHA
          cd try2
          git ls-remote -q | grep refs/heads/main$ | awk '{print $1}' | xargs git rev-parse --short
          git log --max-count=1
          git rev-parse --short HEAD
          sha=$(git rev-parse HEAD)
          echo "headhash=$sha" >> "$GITHUB_OUTPUT"

          equalhead="false"
          if [ $sha = $GITHUB_SHA]; then
            equalhead="true"
          fi
          echo "equalhead=$equalhead" >> "$GITHUB_OUTPUT"

      - name: Equal head
        if: steps.headhash2.outputs.equalhead == 'true'
        run: |
          echo running!!!

        - name: Not equal head
        if: steps.headhash2.outputs.equalhead == 'false'
        run: |
          echo running!!!


  job2:
    runs-on: ubuntu-latest
    needs: gethash
    steps:
      - env:
          HEADHASH1: ${{needs.gethash.outputs.headhash1}}
          HEADHASH2: ${{needs.gethash.outputs.headhash2}}
        run: echo "$HEADHASH1 $HEADHASH2"