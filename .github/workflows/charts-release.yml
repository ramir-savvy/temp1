name: Release Charts

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  CREATED_TIME: ${{ github.event.workflow_run.created_at }}
  # CREATED_TIME: ${{ github.event.workflow_run }}
  DUMMY1: "dummy1"
      
jobs:
  charts-release:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Queued Time
        run: |

          echo GITHUB_REF: $GITHUB_REF
          MAX_QUEUED_TIME=1800 # Maximum queued time in seconds (e.g., 30 minutes)

          # QUEUED_TIME=$(date -d "${{ env.CREATED_TIME }}" +%s)
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - QUEUED_TIME))

          # echo "CREATED_TIME: ${{ env.CREATED_TIME }}"
          # echo "DUMMY1: ${{ env.DUMMY1 }}"
          echo "CREATED_TIME: $CREATED_TIME"
          echo "DUMMY1: $DUMMY1"
          echo "QUEUED_TIME: $QUEUED_TIME"
          echo "CURRENT_TIME: $CURRENT_TIME"
          echo "ELAPSED_TIME: $ELAPSED_TIME"

          if [ $ELAPSED_TIME -gt $MAX_QUEUED_TIME ]; then
              echo "Queued for too long. Cancelling the workflow."
              echo "::set-output name=cancel_workflow::true"
          else
              echo "Queued time is within limits."
              echo "::set-output name=cancel_workflow::false"
          fi
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Print file contenxt
        run: |
          echo "test1:"
          cat test1

      # - name: Get Chart Version from helm
      #   id: chart_version
      #   uses: mikefarah/yq@master
      #   with:
      #     cmd: yq .version charts/ramir-base-chart/Chart.yaml

      # - name: Chart | Push
      #   uses: appany/helm-oci-chart-releaser@v0.4.1
      #   with:
      #     name: ramir-base-chart
      #     repository: ${{ github.repository }}/charts
      #     tag: ${{ steps.chart_version.outputs.result  }}
      #     # path: # Defaults to charts/{name}
      #     registry: ghcr.io
      #     registry_username: ${{ github.actor }}
      #     registry_password: ${{ secrets.GITHUB_TOKEN }}
      #     # update_dependencies: 'true' # Defaults to false
